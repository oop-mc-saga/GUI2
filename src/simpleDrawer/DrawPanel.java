/*
 * DrawPanel.java
 *
 * Created on 2008/11/21, 18:28
 * @author  tadaki
 */
package simpleDrawer;

import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.*;
import utils.FileIO;

public class DrawPanel extends javax.swing.JPanel
        implements MouseListener, MouseMotionListener {

    private BufferedImage image = null;
    private Point point = null;
    private BasicStroke stroke = null;
    private boolean eraser = false;
    private BasicStroke eraserStroke;//Stroke for eraser

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
    }

    /**
     * initialize image, register listener, initialize stroke
     */
    public void initialize() {
        initializeImage();
        addMouseListener(this);
        addMouseMotionListener(this);
        stroke = new BasicStroke();
        eraserStroke = new BasicStroke(20.0f);
    }

    @Override
    public void paintComponent(java.awt.Graphics g) {
        if (image == null) {
            return;
        }
        //show image
        g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), this);
    }

    /**
     * initialize image
     */
    public void initializeImage() {
        Dimension dimension = getPreferredSize();
        //create new image
        image = new BufferedImage(dimension.width, dimension.height,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(this.getBackground());//fill with background color
        g.fillRect(0, 0, dimension.width, dimension.height);
    }

    /**
     * Save image
     *
     * @param file destination file
     */
    public void saveImage(File file) {
        if (!fileChooser.FileUtilGUI.checkWritable(file)) {
            return;
        }
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
        } catch (FileNotFoundException ex) {
            fileChooser.FileUtilGUI.showError(ex.getMessage());
        }
        if (out != null) {
            String ext = FileIO.getExtention(file.getName());
            try {
                javax.imageio.ImageIO.write(image, ext, out);
                String message
                        = "Save image in " + file.getName();
                fileChooser.FileUtilGUI.showMessage(message);
            } catch (IOException ex) {
                fileChooser.FileUtilGUI.showError(ex.getMessage());
            }
        }
    }

    /**
     * Change line width
     *
     * @param w new line width
     */
    public void setLineWidth(int w) {
        if (w < 1) {
            w = 1;
        }
        stroke = new BasicStroke((float) w);
    }

    public void setEraser(boolean eraser) {
        this.eraser = eraser;
    }

    /**
     * * handling mouse events ***********************
     */
    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        point = new Point(e.getPoint());
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (point != null) {
            Graphics2D g = (Graphics2D) image.getGraphics();
            if (eraser) {//eraser case
                g.setColor(this.getBackground());
                g.setStroke(eraserStroke);
            } else {
                g.setColor(this.getForeground());
                g.setStroke(stroke);
            }
            g.drawLine(point.x, point.y, e.getX(), e.getY());
            point = null;
        }
        repaint();
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (point != null) {
            Graphics2D g = (Graphics2D) image.getGraphics();
            if (eraser) {//eraser case
                g.setColor(this.getBackground());
                g.setStroke(eraserStroke);
            } else {
                g.setColor(this.getForeground());
                g.setStroke(stroke);
            }
            g.drawLine(point.x, point.y, e.getX(), e.getY());
            point = new Point(e.getPoint());
        }
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
